<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx">

    <!-- 获取数据源/使用数据源连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">

        <property value="com.mysql.jdbc.Driver" name="driverClassName"/><!--driverClassName指定了JDBC驱动类的全限定类名 -->

        <property value="jdbc:mysql://115.29.111.0:3306/moneyserver" name="url"/><!-- 数据库所在IP地址和数据库名-->

        <property value="root" name="username"/>

        <property value="123456" name="password"/>

    </bean>

    <!-- 1111111111111111111111111111111111111111111声明Hibernate的Session工厂 111111111111111111111111111111111111111111111111111111111111111111-->
    <!-- 用注解的方式定义持久化，声明Hibernate的Session工厂 -->
    <!-- 声明了sessionFactory后，在DAO中可以使用@Autowired和@Qualifier注入属性访问sessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">

        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="model"/> <!-- 使用应用程序管理类型的JPA  值为包路径-->
        <property name="hibernateProperties">
            <props>
                <prop key="dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <bean id="txManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="false" propagation="NOT_SUPPORTED"/>
            <tx:method name="find*" read-only="false" propagation="NOT_SUPPORTED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="bussinessService"
                      expression="execution(* Service.*.*(..))" />
        <aop:advisor pointcut-ref="bussinessService"
                     advice-ref="txAdvice" />
    </aop:config>

    <bean id="DaoFactory" class="dao.DaoFactory" ></bean>

    <bean id="hedao"
          class="until.Hibernate.HibernateEntityDao" scope="prototype">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>
    <!--这个和具体实体无关,所有dao共享-->
    <bean id="hgdao"
          class="until.Hibernate.HibernateGenericDao">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>

    <!--使用泛型DAO作为抽象基类-->
    <bean id="baseDao" class="dao.BaseDao"
          abstract="true" depends-on="hedao,hgdao">
        <property name="hedao">
            <ref bean="hedao" />
        </property>
        <property name="hgdao">
            <ref bean="hgdao" />
        </property>
    </bean>

    <bean id="testBaseDao" class="dao.TestBaseDao">
    </bean>



</beans>