<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx">




    <!-- 获取数据源/使用数据源连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">

        <property value="com.mysql.jdbc.Driver" name="driverClassName"/><!--driverClassName指定了JDBC驱动类的全限定类名 -->

        <property value="jdbc:mysql://127.0.0.1/test" name="url"/><!-- 数据库所在IP地址和数据库名-->

        <property value="ws1" name="username"/>

        <property value="123456" name="password"/>

    </bean>

    <!-- 1111111111111111111111111111111111111111111声明Hibernate的Session工厂 111111111111111111111111111111111111111111111111111111111111111111-->
    <!-- 用注解的方式定义持久化，声明Hibernate的Session工厂 -->
    <!-- 声明了sessionFactory后，在DAO中可以使用@Autowired和@Qualifier注入属性访问sessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">

        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="java"/> <!-- 使用应用程序管理类型的JPA  值为包路径-->
        <property name="hibernateProperties">
            <props>
                <prop key="dialect">org.hibernate.dialect.MySQLDialect</prop>
            </props>
        </property>
    </bean>

    <!-- 用XML的方式声明Hibernate的Session工厂 -->
    <!-- LIST value为对应实体的映射文件 -->
    <!--  <bean id="sessionFactory"
            class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">

      <property name="dataSource" ref="dataSource"/>

        <property name="MappingResources">
               <list>
                      <value>ws1.hbm.xml</value>
               </list>
        </property>
        <property name="hibernateProperties">
        <props>
               <prop key="dialect">org.hibernate.dialect.MySQLDialect</prop>
        </props>
        </property>
        </bean> -->
    <!-- 1111111111111111111111111111111111111111111声明Hibernate的Session工厂 111111111111111111111111111111111111111111111111111111111111111111-->


    <!-- 11111111111111111111111111111111111111111111事务管理器11111111111111111111111111111111111111111111111111111111111111111-->
    <!--通过JDBC实现持久化的事务管理配置-->
    <!-- DataSourceTransactionManager通过调用java.sql.Connection来管理事务 commit()方法提交事务 rollback()方法回滚-->
    <!-- <bean id="transactionManager"
           class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="dataSource"/>
     </bean> -->

    <!--通过Hibernate实现持久化的事务管理配置-->
    <!--HibernateTransactionManager将事务管理委托给org.hibernate.Transaction对象（org.hibernate.Transaction对象从Session中获取）-->
    <!-- <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
         <property name="sessionFactory" ref="sessionFactory"/>
     </bean> -->

    <!--计划采用JPA时，用Spring中的JpaTransactionManager管理事务-->
    <!-- <bean id="transactionManager"
           class="org.springframework.orm.jpa.JpaTransactionManager">
         <property name="entityManagerFactory" ref="entityManagerFactory"/>
     </bean>-->

    <!--JpaTransactionManager支持将事务应用于简单的JDBC中，二者使用的DataSource必须相同
       JpaDialect实现必须同时支持JPA JDBC访问-->
    <bean id="jpaDialect"
          class="org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect"/>
    <!-- 将jpaDialect装配到JpaTransactionManager中-->
    <!-- <bean id="transactionManager"
           class="org.springframework.orm.jpa.JpaTransactionManager">
         <property name="entityManagerFactory" ref="entityManagerFactory"/>
         <property name="jpaDialect" ref="jpaDialect"/>
     </bean> -->

    <!--使用注解配置事务管理器-->
  <!--  <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->
    <!--entityManagerFactory配置(spring为容器，完全掌管JPA时的配置)-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>
    </bean>
    <!-- 若事务需要跨多个数据库-->
    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager"
                  value="java:/TransactionManager"/>
    </bean>

    <!-- 将TransactionTemplate注入到HibernateSpitterDao中-->
    <bean id="spitterService"
          class="dao.HibernateSpitterDao">
        <property name="transactionTemplate">
            <bean class="org.springframework.transaction.support.TransactionTemplate">
                <property name="transactionManager"
                          ref="transactionManager"/>
            </bean>
        </property>

    </bean>


    <!-- 声明事务性策略 transaction-manager指定事务管理器的ID-->
    <tx:advice id="txAdvice"
               transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="*" propagation="SUPPORTS"
                       read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 定义通知器（为定义事务性切面）-->
    <aop:config>
        <aop:advisor
                pointcut="execution(* *..SpitterService.*(..))"
                advice-ref="txAdvice"/>
    </aop:config>
    <!-- 使用annotation-driven定义注解驱动的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- 11111111111111111111111111111111111111111111事务管理器11111111111111111111111111111111111111111111111111111111111111111-->

</beans>